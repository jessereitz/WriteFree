!function(){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e){if(null==e||"object"!==r(e))return!1;var n="";return Object.keys(e).forEach(function(t){n+="".concat(t,": ").concat(e[t],";")}),t.setAttribute("style",n),t}function c(e,t){return t&&(Array.isArray(t)?t.forEach(function(t){return e.classList.add(t)}):e.classList.add(t)),e}function l(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"div",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{},i=document.createElement(t);return c(i,e),n&&"object"===r(n)&&Object.keys(n).forEach(function(t){return"style"===t?a(i,n[t]):"klasses"===t?c(i,n[t]):i.setAttribute(t,n[t]),null}),i}function s(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"Button",e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],i=l("button",e,3<arguments.length&&void 0!==arguments[3]?arguments[3]:{});return n?i.innerHTML=t:i.textContent=t,i}function o(t){return"Backspace"===t.key||t.ctrlKey&&"Backspace"===t.key||t.shiftKey&&"Backspace"===t.key||t.altKey&&"Backspace"===t.key||t.metaKey&&"Backspace"===t.key||"Delete"===t.key||t.ctrlKey&&"Delete"===t.key||t.shiftKey&&"Delete"===t.key||t.altKey&&"Delete"===t.key||t.metaKey&&"Delete"===t.key||t.ctrlKey&&"x"===t.key.toLowerCase()||t.shiftKey&&"x"===t.key.toLowerCase()||t.altKey&&"x"===t.key.toLowerCase()||t.metaKey&&"x"===t.key.toLowerCase()}function h(t){return!!t.includes(".")&&(t.startsWith("http://")||t.startsWith("https://")?t:"http://".concat(t))}function d(t){for(var e=["DIV","P","H1","H2"],n=t;!e.includes(n.tagName);)n=n.parentNode;return n}function u(t,n){if(t.nodeName===n)return t;if(t.parentNode.nodeName===n)return t.parentNode;var i=!1;return t.children&&Array.from(t.children).forEach(function(t){var e=u(t,n);return!!e&&(i=e)}),i}function n(t,e){return t instanceof Selection&&(e.contains(t.anchorNode)&&e.contains(t.focusNode)||t.containsNode(e,!0))}function p(t,e){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2];e.collapse(n),t.removeAllRanges(),t.addRange(e)}var t,f=((t={main:"wf__toolbar"}).btn="".concat(t.main,"__btn"),t.btnDisabled="".concat(t.btn,"-disabled"),t.btnActive="".concat(t.btn,"-active"),t.btnCtn="".concat(t.btn,"-ctn"),t.input="".concat(t.main,"__input"),t.inputCtn="".concat(t.input,"-ctn"),t.hideUp="".concat(t.main,"-hide-up"),t.hideDown="".concat(t.main,"-hide-down"),t.wide="".concat(t.main,"-wide"),t),i={init:function(t,e){this.$ctn=l("div",[f.inputCtn,f.hideDown]),this.$input=l("input",f.input,{type:"text"}),this.$closeBtn=s("<b>&times;</b>",f.btn,!0),this.$ctn.appendChild(this.$input),this.$ctn.appendChild(this.$closeBtn),this.$closeBtn.addEventListener("click",this.hide.bind(this)),this.$input.addEventListener("keypress",this.defaultEnterHandler.bind(this)),this.hideCallback=t,e&&e instanceof HTMLElement&&this.appendTo(e)},defaultEnterHandler:function(t){"Enter"===t.key&&(this.saveHandler&&"function"==typeof this.saveHandler&&this.saveHandler.call(this,this.$input.value,this.currentRange),this.preventHideOnEnter||this.hide())},setSaveHandler:function(t){t&&"function"==typeof t&&(this.saveHandler=t)},clearSaveHandler:function(){this.saveHandler=null},getValue:function(){return this.$input.value},display:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"";this.$input.placeholder=t,this.$ctn.classList.remove(f.hideDown);var e=window.getSelection();this.currentRange=e.getRangeAt(0),document.createRange().selectNode(this.$input),setTimeout(function(){this.$input.focus()}.bind(this),200)},clear:function(t){this.$input.value="",t&&(this.$input.placeholder=t)},hide:function(){var t=!(0<arguments.length&&void 0!==arguments[0])||arguments[0];if(this.$ctn.classList.contains(f.hideDown))return!1;if(this.$ctn.classList.add(f.hideDown),this.$input.value="",this.clearSaveHandler(),this.currentRange){var e=window.getSelection(),n=e.getRangeAt(0);e.removeRange(n),e.addRange(this.currentRange)}return t&&this.hideCallback&&"function"==typeof this.hideCallback&&this.hideCallback(),!0},html:function(){return this.$ctn},getWidth:function(){return this.$ctn.getBoundingClientRect().width},getHeight:function(){return this.$ctn.getBoundingClientRect().height},appendTo:function(t){return t.appendChild(this.html()),t}},e={initToolbar:function(t,e){return this.options=e,this.editor=t,this.toolbarOffset=5,this.$ctn=l("div",[f.main,"hide"],{contenteditable:!1}),this.$btnCtn=l("div",f.btnCtn),this.$ctn.appendChild(this.$btnCtn),this.input=Object.create(i),this.editor.$ctn.appendChild(this.$ctn),this},getButtonsWidth:function(){var t=this.$btnCtn.children;return t[0].getBoundingClientRect().width*(1.1*t.length)},getButtonsHeight:function(){return 1.25*this.$btnCtn.firstChild.getBoundingClientRect().height},hideButtons:function(){this.$ctn.style.width="".concat(this.input.getWidth(),"px"),this.$ctn.style.height="".concat(this.input.getHeight(),"px"),this.$btnCtn.classList.add(f.hideUp)},displayButtons:function(){this.$btnCtn.classList.remove(f.hideUp),this.$ctn.style.width="".concat(this.getButtonsWidth(),"px"),this.$ctn.style.height="".concat(this.getButtonsHeight(),"px")},displayInput:function(t){var e=window.getSelection();this.currentRange=e.getRangeAt(0),this.input.display(t)},hideInput:function(){},positionToolbar:function(){var t=window.getSelection();this.currentRange=t.getRangeAt(0);var e=null;e=this.currentRange.collapsed?this.currentRange.commonAncestorContainer.getBoundingClientRect():this.currentRange.getBoundingClientRect();var n=this.$ctn.getBoundingClientRect(),i=e.bottom+this.toolbarOffset+n.height;console.log(window.innerHeight),console.log(i),console.log(n),i>=window.innerHeight?this.$ctn.style.top="".concat(e.top-(this.toolbarOffset+n.height),"px"):this.$ctn.style.top="".concat(e.bottom+this.toolbarOffset,"px"),this.$ctn.style.left="".concat(e.left,"px")},baseDisplay:function(){return this.input.hide(!1),this.$ctn.classList.remove("hide"),this.positionToolbar(),this.displayButtons(),!0},hide:function(){return this.currentRange=null,this.input.hide(!1),this.displayButtons(),this.$ctn.classList.add("hide"),!!this.$ctn.classList.contains("hide")},html:function(){return this.$ctn},contains:function(t){return this.$ctn.contains(t)}},g={init:function(t,e,n,i){return this.$html=s(t,f.btn,!0,{title:e}),this.setSaveHandler(n),this.appendTo(i),this},setSaveHandler:function(t){return"function"!=typeof t?null:(this.clickHandler&&this.$html.removeEventListener("click",this.clickHandler),this.saveHandler=t,this.$html.addEventListener("click",this.saveHandler),this.saveHandler)},addClass:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];Array.isArray(t)?t.forEach(function(t){e.$html.classList.add(t)}):this.$html.classList.add(t)},removeClass:function(){var e=this,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];Array.isArray(t)?t.forEach(function(t){e.$html.classList.remove(t)}):this.$html.classList.remove(t)},disable:function(){this.$html.disabled=!0,this.addClass(f.btnDisabled)},enable:function(){this.$html.disabled=!1,this.removeClass(f.btnDisabled)},markActive:function(){this.$html.classList.add(f.btnActive)},markInactive:function(){this.$html.classList.remove(f.btnActive)},html:function(){return this.$html},appendTo:function(t){t&&t instanceof HTMLElement&&t.appendChild(this.html())}},v=Object.create(e);v.init=function(t,e){return this.initToolbar(t,e),this.input.init(this.displayButtons.bind(this),this.$ctn),this.createToolbarBtns(),this},v.createToolbarBtns=function(){this.boldBtn=Object.create(g),this.boldBtn.init("<b>B</b>","Bold Selection",this.editor.boldSelection.bind(this.editor),this.$btnCtn),this.italicBtn=Object.create(g),this.italicBtn.init("<i>i</i>","Italicize Selection",this.editor.italicizeSelection.bind(this.editor),this.$btnCtn),this.headingBtn=Object.create(g),this.headingBtn.init("H","Wrap Selection with Heading",this.editor.wrapHeading.bind(this.editor),this.$btnCtn),this.linkBtn=Object.create(g),this.linkBtn.init("🔗","Wrap Selection with Link",this.linkBtnHandler.bind(this),this.$btnCtn)},v.toggleDisabledButtons=function(){u(this.currentRange.commonAncestorContainer,"H1")||u(this.currentRange.commonAncestorContainer,"H2")?(this.linkBtn.disable(),this.boldBtn.disable(),this.italicBtn.disable()):(this.linkBtn.enable(),this.boldBtn.enable(),this.italicBtn.enable())},v.toggleActiveLink=function(t){var e=u(t.getRangeAt(0).commonAncestorContainer,"A");e&&t.containsNode(e,!0)?(this.linkBtn.markActive(),this.linkBtn.currentLink=e):(this.linkBtn.currentLink=null,this.linkBtn.markInactive())},v.linkBtnHandler=function(){this.linkBtn.currentLink?(this.editor.removeLink(this.linkBtn.currentLink),this.linkBtn.currentLink=null,this.linkBtn.markInactive()):(this.input.setSaveHandler(this.editor.wrapLink),this.hideButtons(),this.input.display("Type a link..."))},v.display=function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return t instanceof Selection&&(!n(t,this.$ctn)&&(this.currentRange=t.getRangeAt(0),this.toggleActiveLink(t),this.toggleDisabledButtons(),this.baseDisplay()))};var b=Object.create(e);b.init=function(t,e){return this.initToolbar(t,e),this.toolbarOffset=15,this.createToolbarBtns(),this.input.init(this.hideImageInput.bind(this),this.$ctn),this.input.$input.id="input",this},b.createToolbarBtns=function(){this.imgBtn=Object.create(g),this.imgBtn.init("🖼️","Insert an Image",this.displayImgInput.bind(this),this.$btnCtn),this.lineBtn=Object.create(g),this.lineBtn.init("--","Insert a Horizontal Rule",this.editor.insertLine.bind(this.editor),this.$btnCtn)},b.toggleDisabledButtons=function(){var t=window.getSelection();this.editor.isFirst(t.anchorNode)?this.lineBtn.disable():this.lineBtn.enable()},b.displayImgInput=function(){var t=window.getSelection();this.currentRange=t.getRangeAt(0),this.input.setSaveHandler(this.insertImage.bind(this)),this.input.preventHideOnEnter=!0,this.hideButtons(),this.input.display("Type an image URL...")},b.hideImageInput=function(){this.imgURL=null,this.displayButtons()},b.insertImage=function(){this.imgURL?(this.editor.insertImage(this.imgURL,this.input.getValue(),this.currentRange.startContainer),this.input.hide(),this.displayButtons(),this.hide()):(this.imgURL=h(this.input.getValue()),this.input.clear("Enter alt text..."))},b.display=function(){return this.toggleDisabledButtons(),this.baseDisplay()};var m={initWFEditor:function(t,e){return this.$ctn=t,this.options=e,this.generateClasses(),document.execCommand("defaultParagraphSeparator",!1,this.options.divOrPar),this.$innerCtn=l("div",this.classes.main,{style:this.options.containerStyle}),this.$innerCtn.setAttribute("contenteditable",!0),this.$ctn.append(this.$innerCtn),this.createFirstTextSection(),this.editToolbar=v.init(this,this.options),this.insertToolbar=b.init(this,this.options),this.$ctn.addEventListener("paste",this.pasteHandler.bind(this)),this.$ctn.addEventListener("keydown",this.keydownHandler.bind(this)),this.$ctn.addEventListener("keyup",this.keyupHandler.bind(this)),this.$ctn.addEventListener("click",this.checkForInsert.bind(this)),this.$ctn.addEventListener("mouseup",this.positionCursor.bind(this)),document.addEventListener("selectionchange",this.selectionHandler.bind(this)),this},generateClasses:function(){return this.classes={},this.classes.main=["wf__editor"],"wf__edtior"!==this.options.containerClass&&this.classes.main.push(this.options.containerClass),this.classes.textSection="wf__text-section",this.classes.containerSection="wf__container-section",this.classes},createFirstTextSection:function(){this.$firstSection||(this.$firstSection=this.createTextSection()),this.$firstSection.textContent="",this.$innerCtn.insertBefore(this.$firstSection,this.$innerCtn.firstChild);var t=window.getSelection(),e=document.createRange();return e.setStart(this.$firstSection,0),e.setEnd(this.$firstSection,0),t.removeAllRanges(),t.addRange(e),window.first=this.$firstSection,this.$firstSection},displayFirstSectionPlaceholder:function(){var t=window.getSelection();t.isCollapsed&&this.isFirst(t.anchorNode)&&t.anchorNode.classList.contains(this.classes.textSection)&&""===t.anchorNode.textContent&&(t.anchorNode.innerHTML="")},createTextSection:function(){Array.isArray(this.options.sectionClass)||(this.options.sectionClass=Array(this.options.sectionClass)),this.options.sectionClass.push(this.classes.textSection);var t={style:this.options.sectionStyle,klasses:this.options.sectionClass};return l(this.options.divOrPar,[],t)},createContainerSection:function(t){var e=l("div",this.classes.containerSection);return t&&t instanceof Element&&e.appendChild(t),e},normalizeSection:function(){var t=window.getSelection();try{var e=t.getRangeAt(0),n=d(t.anchorNode),i=d(t.focusNode);n&&n.normalize(),i&&i.normalize(),e.commonAncestorContainer&&e.commonAncestorContainer.normalize()}catch(t){return null}return null},deleteContainerSection:function(t){var e=d(window.getSelection().anchorNode),n=null;return"Backspace"===t.key?n=e.previousSibling:"Delete"===t.key&&(n=e.nextSibling),n&&n.classList.contains(this.classes.containerSection)&&(t.preventDefault(),e.parentNode.removeChild(n)),!1},preventTextInContainer:function(t){var e=window.getSelection(),n=d(e.anchorNode);if(n.classList.contains(this.classes.containerSection)){var i=n.nextSibling;"ArrowUp"===t.key||"ArrowLeft"===t.key?i=n.previousSibling:"ArrowDown"===t.key||"ArrowRight"===t.key?i=n.nextSibling:(!i||i.classList.contains(this.classes.containerSection)||i.classList.contains(this.classes.textSection)&&0<i.textContent.length)&&(i=this.createTextSection(),this.$innerCtn.insertBefore(i,n.nextSibling)),t.preventDefault(),e.collapse(i,0)}},boldSelection:function(){window.getSelection()instanceof Selection&&document.execCommand("bold",!1)},italicizeSelection:function(){window.getSelection()instanceof Selection&&document.execCommand("italic",!1)},wrapHeading:function(){var t,e,n,i=window.getSelection(),s=d(i.anchorNode);if(s.innerHTML=s.innerHTML.replace(/<[^>]+>/g,""),i instanceof Selection){n="H1"===s.tagName?(t=this.options.divOrPar,e=this.options.sectionClass,this.options.sectionStyle):"DIV"===s.tagName?(t="h2",e=this.options.smallHeadingClass,this.options.smallHeadingClass):(t="h1",e=this.options.largeHeadingClass,this.options.largeHeadingStyle);var o=document.execCommand("formatBlock",!1,t);if(o){a(s=d(i.anchorNode),n),c(s,e);var r=i.getRangeAt(0);r.selectNode(i.focusNode),r.collapse()}return o}return!1},wrapLink:function(t,e){var n=h(t);if(!n)return!1;var i=l("a");return i.href=n,e.surroundContents(i),p(window.getSelection(),e),i},removeLink:function(t){var e=window.getSelection();this.currentRange=e.getRangeAt(0);var n=document.createRange();n.selectNode(t);var i=document.createTextNode(t.textContent);n.deleteContents(),n.insertNode(i),p(e,n)},insertImage:function(t,e,n){var i=window.getSelection(),s=l("img",[],{src:t,alt:e}),o=this.createContainerSection();s.section=o,s.onerror=function(){s.section.parentNode.removeChild(s.section),alert("Image failed to load.")},n===this.$firstSection&&(this.$firstSection=o),o.appendChild(s),n.parentNode.insertBefore(o,n);var r=document.createRange();r.selectNodeContents(n),p(i,r,!0)},insertLine:function(){var t=window.getSelection(),e=t.getRangeAt(0),n=d(e.startContainer);if(n===this.$firstSection)return!1;var i=document.createElement("hr"),s=this.createContainerSection();return s.appendChild(i),n.parentNode.insertBefore(s,n),(e=document.createRange()).selectNodeContents(n),p(t,e,!0),this.insertToolbar.hide(),!0},selectionHandler:function(t){if("selectionchange"!==t.type)return!1;var e=window.getSelection();return n(e,this.$ctn)&&!e.isCollapsed||n(e,this.editToolbar.html())?this.editToolbar.display(e):this.editToolbar.hide(),!0},pasteHandler:function(t){if(t.preventDefault(),"paste"===!t.type)return!1;var e=t.clipboardData.getData("text/plain");return document.execCommand("insertHTML",!1,e),!0},newLineHandler:function(t){t.preventDefault();var e=window.getSelection(),n=d(e.focusNode),i=this.createTextSection();n.parentNode.insertBefore(i,n.nextSibling);var s=e.getRangeAt(0);if(s.collapsed)try{s.setEndBefore(n.nextSibling),0!==s.toString().length&&i.append(s.cloneContents())}catch(t){i.textContent=""}return 0===i.textContent.length&&i.append(document.createTextNode("")),s.deleteContents(),e.collapse(i,0),i.normalize(),i},keydownHandler:function(t){var e=window.getSelection();o(t)&&("Backspace"===t.key&&0===e.anchorOffset&&e.focusOffset===e.focusNode.textContent.length&&e.anchorNode===e.focusNode?this.deleteContainerSection(t):"Delete"===t.key&&e.anchorOffset===e.anchorNode.textContent.length&&e.focusOffset===e.focusNode.textContent.length&&e.anchorNode===e.focusNode&&this.deleteContainerSection(t)),"Enter"===t.key&&this.$innerCtn.contains(t.target)&&this.newLineHandler(t),this.preventTextInContainer(t);var n=e.getRangeAt(0),i=d(n.startContainer);this.editToolbar.contains(i)||this.insertToolbar.contains(i)||(this.prevSection=i,this.prevSectionPrevSibling=this.prevSection.previousSibling,this.prevOffset=n.startOffset)},keyupHandler:function(t){if(o(t)){var e=window.getSelection();""!==this.$innerCtn.innerHTML&&"<br>"!==this.$innerCtn.innerHTML&&e.anchorNode!==this.$innerCtn||this.createFirstTextSection(),this.displayFirstSectionPlaceholder()}try{this.normalizeSection(),this.checkForInsert(t),this.positionCursor()}catch(t){return null}return!0},checkForInsert:function(t){if(t&&this.insertToolbar.$ctn.contains(t.target))return!1;var e=window.getSelection();return this.insertToolbar.hide(),!(!e.isCollapsed||!e.anchorNode||""!==e.anchorNode.textContent||n(e,this.insertToolbar.$ctn))&&(this.insertToolbar.display(),!0)},positionCursor:function(){var t=window.getSelection(),e=null;try{e=d(t.anchorNode)}catch(t){return!1}if(this.editToolbar.contains(e)||this.insertToolbar.contains(e))return!1;var n=t.getRangeAt(0);if(!e.classList.contains(this.classes.textSection))if(this.prevSection&&this.$innerCtn.contains(this.prevSection)&&this.prevSection.classList.contains(this.classes.textSection))t.collapse(this.prevSection,this.prevOffset);else{if(!(e=this.prevSectionPrevSibling))return!1;var i=this.createTextSection();e.nextSibling?this.$innerCtn.insertBefore(i,e.nextSibling):this.$innerCtn.appendChild(i),n.selectNodeContents(i),n.collapse(!0)}return!0},html:function(){return this.$innerCtn},getToolbar:function(){return this.editToolbar},isFirst:function(t){return this.$innerCtn.children[0]===t}};window.wf=function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},i={divOrPar:"p",sectionClass:null,sectionStyle:null,containerClass:"wf__editor",containerStyle:null,largeHeadingClass:null,largeHeadingStyle:null,smallHeadingClass:null,smallHeadingStyle:null},s=(e=Object.create(i),n&&"object"===r(n)&&Object.keys(n).forEach(function(t){e[t]=n[t]}),e),o=Object.create(m);return o.initWFEditor(t,s),{html:o.html.bind(o)}}(document.getElementById("WriteFreeCtn"),{divOrPar:"div",sectionClass:"testSection",sectionStyle:{},containerClass:"testContainer",containerStyle:{}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
